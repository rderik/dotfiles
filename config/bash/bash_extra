# vim: filetype=sh

# --files: List files that would be searched but do not search
# --no-ignore: Do not respect .gitignore, etc...
# --hidden: Search hidden files and folders
# --follow: Follow symlinks
# --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
#export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'

#https://stackoverflow.com/a/51061046
silent_background() {
    { 2>&3 "$@"& } 3>&2 2>/dev/null
    disown &>/dev/null  # Prevent whine if job has already completed
}


#Nodenv version manager
#eval "$(nodenv init -)"
nodenv() {
  unset -f nodenv
  eval "$(nodenv init -)"
  nodenv $@
}

# RBENV configuration
export PATH="$HOME/.rbenv/bin:$PATH"
#eval "$(rbenv init -)"
rbenv() {
  unset -f rbenv
  eval "$(rbenv init -)"
  rbenv $@
}

#qt5 for capybara webkit
#silent_background export PATH="$(brew --prefix qt@5.5)/bin:$PATH"

#Rust cargo add to path
export PATH="$HOME/.cargo/bin:$PATH"

if [ "$(uname)" == "Darwin" ]; then
  # bash completion
  brew_prefix=$(brew --prefix)
  # Rails bash completion
  if [ -f ${brew_prefix}/etc/bash_completion.d/rails.bash ]; then
    source ${brew_prefix}/etc/bash_completion.d/rails.bash
  fi

  # Ledger bash completion
  if [ -f ${brew_prefix}/etc/bash_completion.d/ledger-completion.bash ]; then
    source ${brew_prefix}/etc/bash_completion.d/ledger-completion.bash
  fi
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  # need to add completions for Linux
  :
fi

#imagemagick dirty fixes TODO: remove when possible
export PATH="/usr/local/opt/imagemagick@6/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/imagemagick@6/lib"
export CPPFLAGS="-I/usr/local/opt/imagemagick@6/include"
export PKG_CONFIG_PATH="/usr/local/opt/imagemagick@6/lib/pkgconfig"

#More trash for MySQL
export PATH="/usr/local/opt/mysql@5.6/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/mysql@5.6/lib"
export CPPFLAGS="-I/usr/local/opt/mysql@5.6/include"


# jenv to manage Java Versions
#eval "$(jenv init -)"
jenv() {
  unset -f jenv
  eval "$(jenv init -)"
  jenv $@
}

#pyenv to manage python versions
#eval "$(pyenv init -)"
#eval "$(pyenv virtualenv-init -)"
pyenv() {
  unset -f pyenv
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
  pyenv $@
}
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

# Add terraform autocomplete
complete -C /usr/local/bin/terraform terraform

# To specify environment varialbes per directory using a .envrc file on a directory
eval "$(direnv hook bash)"
